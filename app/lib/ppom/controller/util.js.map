{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;;;;AAAA,wDAAgC;AAChC,4EAA4C;AAE5C,MAAM,KAAK,GAAG,kBAAQ,CAAC,KAAK,CAAC;AAC7B,MAAM,UAAU,GAAG,UAAU,CAAC;AAEjB,QAAA,WAAW,GAAG,IAAA,4BAAU,GAAE,CAAC;AAEjC,MAAM,aAAa,GAAG,CAC3B,MAAc,EACd,MAA+B,EAC/B,EAAE,CAAC,CAAC;IACJ,EAAE,EAAE,IAAA,mBAAW,GAAE;IACjB,OAAO,EAAE,KAAK;IACd,MAAM;IACN,MAAM,EAAE,MAAM,IAAI,EAAE;CACrB,CAAC,CAAC;AARU,QAAA,aAAa,iBAQvB;AAEU,QAAA,eAAe,GAAG;IAC7B,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;QACpB,OAAO,EAAE,KAAK;QACd,EAAE,EAAE,IAAA,mBAAW,GAAE;QACjB,KAAK,EAAE;YACL,IAAI,EAAE,CAAC,KAAK;YACZ,OAAO,EAAE,gBAAgB;SAC1B;KACF,CAAC;IACF,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC;QACzB,OAAO,EAAE,KAAK;QACd,EAAE,EAAE,IAAA,mBAAW,GAAE;QACjB,KAAK,EAAE;YACL,IAAI,EAAE,CAAC,KAAK;YACZ,OAAO,EAAE,sBAAsB;SAChC;KACF,CAAC;CACH,CAAC;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,IAAS,EACT,SAAiB,EACjB,GAAW,EACX,QAAgB,EAChB,EAAE;IACF,MAAM,EAAE,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;IAChC,MAAM,KAAK,GAAG,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACpC,iDAAiD;IACjD,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;IAC1D,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,KAAK,CAAC,gDAAgD,QAAQ,EAAE,CAAC,CAAC;KACzE;AACH,CAAC,CAAC;AAbW,QAAA,iBAAiB,qBAa5B;AAEK,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAE,IAAY,EAAU,EAAE,CACrE,IAAI,GAAG,CACL,GAAG,UAAU,GAAG,IAAI,IAAI,IAAI,EAAE;KAC3B,OAAO,CAAC,wBAAwB,EAAE,UAAU,CAAC;KAC7C,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAC1B,CAAC,IAAI,CAAC;AALI,QAAA,gBAAgB,oBAKpB;AAEF,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,EAAE;IAC1C,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;QAClD,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;QACvB,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAChC;IAED,OAAO,KAAK,GAAG,EAAE,CAAC;AACpB,CAAC,CAAC;AAVW,QAAA,YAAY,gBAUvB","sourcesContent":["import elliptic from 'elliptic';\nimport IdIterator from 'json-rpc-random-id';\n\nconst EdDSA = elliptic.eddsa;\nconst URL_PREFIX = 'https://';\n\nexport const IdGenerator = IdIterator();\n\nexport const createPayload = (\n  method: string,\n  params: Record<string, unknown>,\n) => ({\n  id: IdGenerator(),\n  jsonrpc: '2.0',\n  method,\n  params: params || [],\n});\n\nexport const PROVIDER_ERRORS = {\n  limitExceeded: () => ({\n    jsonrpc: '2.0',\n    id: IdGenerator(),\n    error: {\n      code: -32005,\n      message: 'Limit exceeded',\n    },\n  }),\n  methodNotSupported: () => ({\n    jsonrpc: '2.0',\n    id: IdGenerator(),\n    error: {\n      code: -32601,\n      message: 'Method not supported',\n    },\n  }),\n};\n\nexport const validateSignature = async (\n  data: any,\n  signature: string,\n  key: string,\n  filePath: string,\n) => {\n  const ec = new EdDSA('ed25519');\n  const ecKey = ec.keyFromPublic(key);\n  // eslint-disable-next-line no-restricted-globals\n  const result = ecKey.verify(Buffer.from(data), signature);\n  if (!result) {\n    throw Error(`Signature verification failed for file path: ${filePath}`);\n  }\n};\n\nexport const constructURLHref = (base: string, path: string): string =>\n  new URL(\n    `${URL_PREFIX}${base}/${path}`\n      .replace(/https:\\/\\/https:\\/\\//gu, 'https://')\n      .replace(/\\/\\//gu, '/'),\n  ).href;\n\nexport const addHexPrefix = (str: string) => {\n  if (typeof str !== 'string' || str.match(/^-?0x/u)) {\n    return str;\n  }\n\n  if (str.match(/^-?0X/u)) {\n    return str.replace('0X', '0x');\n  }\n\n  return `0x${str}`;\n};\n"]}
{"version":3,"file":"ppom-controller.js","sourceRoot":"","sources":["../src/ppom-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { safelyExecute, timeoutFetch } from '@metamask/controller-utils';\nimport { Mutex } from 'await-semaphore';\nimport CryptoJS, { SHA256 } from 'crypto-js';\n\nimport {\n  StorageBackend,\n  PPOMStorage,\n  FileMetadataList,\n  FileMetadata,\n} from './ppom-storage';\nimport {\n  IdGenerator,\n  PROVIDER_ERRORS,\n  addHexPrefix,\n  constructURLHref,\n  createPayload,\n  validateSignature,\n} from './util';\n\nexport const REFRESH_TIME_INTERVAL = 1000 * 60 * 60 * 2;\nconst PROVIDER_REQUEST_LIMIT = 300;\nconst FILE_FETCH_SCHEDULE_INTERVAL = 1000 * 60 * 5;\nexport const NETWORK_CACHE_DURATION = 1000 * 60 * 60 * 24 * 7;\n\nconst NETWORK_CACHE_LIMIT = {\n  MAX: 5,\n  MIN: 2,\n};\n\n// The following methods on provider are allowed to PPOM\nconst ALLOWED_PROVIDER_CALLS = [\n  'eth_call',\n  'eth_blockNumber',\n  'eth_createAccessList',\n  'eth_getLogs',\n  'eth_getFilterLogs',\n  'eth_getTransactionByHash',\n  'eth_chainId',\n  'eth_getBlockByHash',\n  'eth_getBlockByNumber',\n  'eth_getCode',\n  'eth_getStorageAt',\n  'eth_getBalance',\n  'eth_getTransactionCount',\n  'trace_call',\n  'trace_callMany',\n  'debug_traceCall',\n  'trace_filter',\n];\n\nconst ETHEREUM_CHAIN_ID = '0x1';\n\n/**\n * @type PPOMFileVersion\n * @augments FileMetadata\n * @property filePath - Path of the file in CDN.\n */\ntype PPOMFileVersion = FileMetadata & {\n  filePath: string;\n  signature: string;\n  hashSignature: string;\n};\n\n/**\n * @type PPOMVersionResponse - array of objects of type PPOMFileVersion\n */\ntype PPOMVersionResponse = PPOMFileVersion[];\n\ntype ChainInfo = {\n  chainId: string;\n  lastVisited: number;\n  dataFetched: boolean;\n  versionInfo: PPOMVersionResponse;\n};\n\ntype ChainType = Record<string, ChainInfo>;\n\n/**\n * @type PPOMState\n *\n * Controller state\n * @property chainId - ID of current chain.\n * @property chainStatus - Array of chainId and time it was last visited.\n * @property versionInfo - Version information fetched from CDN.\n * @property storageMetadata - Metadata of files storaged in storage.\n */\nexport type PPOMState = {\n  // list of chainIds and time the network was last visited, list of all networks visited in last 1 week is maintained\n  chainStatus: ChainType;\n  // version information obtained from version info file\n  versionInfo: PPOMVersionResponse;\n  // storage metadat of files already present in the storage\n  storageMetadata: FileMetadataList;\n  // ETag obtained using HEAD request on version file\n  versionFileETag?: string;\n};\n\nconst stateMetaData = {\n  versionInfo: { persist: false, anonymous: false },\n  chainStatus: { persist: false, anonymous: false },\n  storageMetadata: { persist: false, anonymous: false },\n  versionFileETag: { persist: false, anonymous: false },\n};\n\nconst PPOM_VERSION_FILE_NAME = 'ppom_version.json';\nconst controllerName = 'PPOMController';\nconst versionInfoFileHeaders = {\n  headers: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n  },\n};\n\nexport type UsePPOM = {\n  type: `${typeof controllerName}:usePPOM`;\n  handler: (callback: (ppom: any) => Promise<any>) => Promise<any>;\n};\n\nexport type UpdatePPOM = {\n  type: `${typeof controllerName}:updatePPOM`;\n  handler: () => void;\n};\n\nexport type PPOMControllerActions = UsePPOM | UpdatePPOM;\n\nexport type PPOMControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  PPOMControllerActions,\n  never,\n  never,\n  never\n>;\n\n// eslint-disable-next-line  @typescript-eslint/naming-convention\ntype PPOMProvider = {\n  ppomInit: (wasmFilePath: string) => Promise<void>;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  PPOM: any;\n};\n\n/**\n * PPOMController\n * Controller responsible for managing the PPOM\n *\n * @property config - The controller configuration\n * @property state - The controller state\n * @property storage - The controller storage\n * @property ppom - The PPOM instance\n * @property provider - The provider used to create the PPOM instance\n */\nexport class PPOMController extends BaseControllerV2<\n  typeof controllerName,\n  PPOMState,\n  PPOMControllerMessenger\n> {\n  #ppom: any;\n\n  #ppomInitError: any;\n\n  #provider: any;\n\n  #storage: PPOMStorage;\n\n  #refreshDataInterval: any;\n\n  #fileScheduleInterval: any;\n\n  /*\n   * This mutex is used to prevent concurrent usage of the PPOM instance\n   * and protect the PPOM instance from being used while it is being initialized/updated\n   */\n  #ppomMutex: Mutex;\n\n  #ppomProvider: PPOMProvider;\n\n  // base URL of the CDN\n  #cdnBaseUrl: string;\n\n  // Limit of number of requests ppom can send to the provider per transaction\n  #providerRequestLimit: number;\n\n  // Number of requests sent to provider by ppom for current transaction\n  #providerRequests = 0;\n\n  // id of current chain selected\n  #chainId: string;\n\n  // interval at which data files are refreshed, default will be 2 hours\n  #dataUpdateDuration: number;\n\n  // interval at which files for a network are fetched\n  #fileFetchScheduleDuration: number;\n\n  // true if user has enabled preference for blockaid security check\n  #securityAlertsEnabled: boolean;\n\n  // Map of count of each provider request call\n  #providerRequestsCount: Record<string, number> = {};\n\n  #blockaidPublicKey: string;\n\n  #ppomInitialised = false;\n\n  /**\n   * Creates a PPOMController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.chainId - ChainId of the selected network.\n   * @param options.messenger - Controller messenger.\n   * @param options.onNetworkChange - Callback tobe invoked when network changes.\n   * @param options.provider - The provider used to create the PPOM instance.\n   * @param options.storageBackend - The storage backend to use for storing PPOM data.\n   * @param options.securityAlertsEnabled - True if user has enabled preference for blockaid security check.\n   * @param options.onPreferencesChange - Callback invoked when user changes preferences.\n   * @param options.ppomProvider - Object wrapping PPOM.\n   * @param options.cdnBaseUrl - Base URL for the CDN.\n   * @param options.providerRequestLimit - Limit of number of requests that can be sent to provider per transaction.\n   * @param options.dataUpdateDuration - Duration after which data is fetched again.\n   * @param options.fileFetchScheduleDuration - Duration after which next data file is fetched.\n   * @param options.state - Initial state of the controller.\n   * @param options.blockaidPublicKey - Public key of blockaid for verifying signatures of data files.\n   * @returns The PPOMController instance.\n   */\n  constructor({\n    chainId,\n    messenger,\n    onNetworkChange,\n    provider,\n    storageBackend,\n    securityAlertsEnabled,\n    onPreferencesChange,\n    ppomProvider,\n    cdnBaseUrl,\n    providerRequestLimit,\n    dataUpdateDuration,\n    fileFetchScheduleDuration,\n    state,\n    blockaidPublicKey,\n  }: {\n    chainId: string;\n    onNetworkChange: (callback: (networkState: any) => void) => void;\n    messenger: PPOMControllerMessenger;\n    provider: any;\n    storageBackend: StorageBackend;\n    securityAlertsEnabled: boolean;\n    onPreferencesChange: (callback: (perferenceState: any) => void) => void;\n    ppomProvider: PPOMProvider;\n    cdnBaseUrl: string;\n    providerRequestLimit?: number;\n    dataUpdateDuration?: number;\n    fileFetchScheduleDuration?: number;\n    state?: PPOMState;\n    blockaidPublicKey: string;\n  }) {\n    const currentChainId = addHexPrefix(chainId);\n    const initialState = {\n      versionInfo: state?.versionInfo ?? [],\n      storageMetadata: state?.storageMetadata ?? [],\n      chainStatus: state?.chainStatus ?? {\n        [currentChainId]: {\n          chainId: currentChainId,\n          lastVisited: new Date().getTime(),\n          dataFetched: false,\n          versionInfo: [],\n        },\n      },\n    };\n    super({\n      name: controllerName,\n      metadata: stateMetaData,\n      messenger,\n      state: initialState,\n    });\n\n    this.#chainId = currentChainId;\n    this.#provider = provider;\n    this.#ppomProvider = ppomProvider;\n    this.#storage = new PPOMStorage({\n      storageBackend,\n      readMetadata: () => {\n        return JSON.parse(JSON.stringify(this.state.storageMetadata));\n      },\n      writeMetadata: (metadata) => {\n        this.update((draftState) => {\n          draftState.storageMetadata = metadata;\n        });\n      },\n    });\n    this.#ppomMutex = new Mutex();\n    this.#cdnBaseUrl = cdnBaseUrl;\n    this.#providerRequestLimit = providerRequestLimit ?? PROVIDER_REQUEST_LIMIT;\n    this.#dataUpdateDuration = dataUpdateDuration ?? REFRESH_TIME_INTERVAL;\n    this.#fileFetchScheduleDuration =\n      fileFetchScheduleDuration === undefined\n        ? FILE_FETCH_SCHEDULE_INTERVAL\n        : fileFetchScheduleDuration;\n    this.#securityAlertsEnabled = securityAlertsEnabled;\n    this.#blockaidPublicKey = blockaidPublicKey;\n\n    // add new network to chainStatus list\n    onNetworkChange(this.#onNetworkChange.bind(this));\n\n    // enable / disable PPOM validations as user changes preferences\n    onPreferencesChange(this.#onPreferenceChange.bind(this));\n\n    // register message handlers\n    this.#registerMessageHandlers();\n\n    // start scheduled task to fetch data files\n    this.#checkScheduleFileDownloadForAllChains();\n  }\n\n  /**\n   * Update the PPOM.\n   */\n  async updatePPOM(): Promise<void> {\n    if (!this.#securityAlertsEnabled) {\n      throw Error('User has securityAlertsEnabled set to false');\n    }\n    // delete chains more than a week old\n    this.#deleteOldChainIds();\n    // If none of the networks in chainStatus are supported we stop fetching data files\n    // and inactivate functionality by reseting PPOM\n    if (!this.#chainStatusIncludeSupportedNetworks()) {\n      this.#resetToInactiveState();\n      return;\n    }\n\n    await this.#updatePPOM();\n  }\n\n  /**\n   * Use the PPOM.\n   * This function receives a callback that will be called with the PPOM.\n   *\n   * @param callback - Callback to be invoked with PPOM.\n   */\n  async usePPOM<T>(\n    callback: (ppom: any) => Promise<T>,\n  ): Promise<T & { providerRequestsCount: Record<string, number> }> {\n    if (!this.#securityAlertsEnabled) {\n      throw Error('User has securityAlertsEnabled set to false');\n    }\n    if (!this.#networkIsSupported(this.#chainId)) {\n      throw Error('Blockaid validation is available only on ethereum mainnet');\n    }\n\n    await this.#reinitPPOMForNetworkIfRequired();\n    if (this.#ppomInitError) {\n      throw new Error(this.#ppomInitError);\n    }\n\n    this.#providerRequests = 0;\n    this.#providerRequestsCount = {};\n    return await this.#ppomMutex.use(async () => {\n      const result = await callback(this.#ppom);\n\n      return {\n        ...result,\n        // we are destructuring the object below as this will be used outside the controller\n        // we want to avoid possibility of outside code changing an instance variable.\n        providerRequestsCount: { ...this.#providerRequestsCount },\n      };\n    });\n  }\n\n  /*\n   * Initialise PPOM loading wasm file.\n   * This is done only if user has enabled preference for PPOM Validation.\n   * Initialisation is done as soon as controller is constructed\n   * or as user enables preference for blcokaid validation.\n   */\n  async #initialisePPOM() {\n    if (this.#securityAlertsEnabled && !this.#ppomInitialised) {\n      await this.#ppomMutex\n        .use(async () => {\n          const { ppomInit } = this.#ppomProvider;\n          await ppomInit('./ppom_bg.wasm');\n          this.#ppomInitialised = true;\n        })\n        .catch((error: unknown) => {\n          console.error('Error in trying to initialize PPOM');\n          throw error;\n        });\n    }\n  }\n\n  /*\n   * The function check if ethereum mainnet is in list of recent networks\n   */\n  #chainStatusIncludeSupportedNetworks() {\n    const networkIsSupported = this.#networkIsSupported.bind(this);\n    return (\n      this.state?.chainStatus &&\n      Object.keys(this.state?.chainStatus)?.some(networkIsSupported)\n    );\n  }\n\n  /*\n   * The function check if ethereum chainId is supported for validation\n   * Currently it checks for only Ethereum Mainnet but it will include more networks in future.\n   */\n  #networkIsSupported(chainId: string) {\n    return chainId === ETHEREUM_CHAIN_ID;\n  }\n\n  /*\n   * Clear intervals for data fetching.\n   * This is done if data fetching is no longer needed.\n   * In cases like:\n   * 1. User disabled preference to validate request using Blockaid\n   * 2. There is not network in stats.chainStatus for which Blockaid validation is supported.\n   */\n  #clearDataFetchIntervals() {\n    clearInterval(this.#refreshDataInterval);\n    clearInterval(this.#fileScheduleInterval);\n    this.#refreshDataInterval = undefined;\n    this.#fileScheduleInterval = undefined;\n  }\n\n  /*\n   * The function resets the controller to inactiva state\n   * 1. reset the PPOM\n   * 2. clear data fetch intervals\n   * 3. clears version information of data files\n   */\n  #resetToInactiveState() {\n    this.#resetPPOM();\n    this.#clearDataFetchIntervals();\n    this.update((draftState) => {\n      draftState.versionInfo = [];\n      const newChainStatus = { ...this.state.chainStatus };\n      Object.keys(newChainStatus).forEach((chainId: string) => {\n        if (newChainStatus[chainId]) {\n          const chainInfo: ChainInfo = {\n            ...(newChainStatus[chainId] as ChainInfo),\n            dataFetched: false,\n            versionInfo: [],\n          };\n          newChainStatus[chainId] = chainInfo;\n        }\n      });\n      draftState.chainStatus = newChainStatus;\n      draftState.storageMetadata = [];\n      draftState.versionFileETag = '';\n    });\n    // todo: as we move data files to controller storage we should also delete those here\n  }\n\n  /*\n   * The function adds new network to chainStatus list.\n   */\n  #onNetworkChange(networkControllerState: any): void {\n    const id = addHexPrefix(networkControllerState.providerConfig.chainId);\n    let chainStatus = { ...this.state.chainStatus };\n    const existingNetworkObject = chainStatus[id];\n    const oldChainId = this.#chainId;\n    this.#chainId = id;\n    chainStatus = {\n      ...chainStatus,\n      [id]: {\n        chainId: id,\n        lastVisited: new Date().getTime(),\n        dataFetched: existingNetworkObject?.dataFetched ?? false,\n        versionInfo: existingNetworkObject?.versionInfo ?? [],\n      },\n    };\n    this.update((draftState) => {\n      draftState.chainStatus = chainStatus;\n    });\n    this.#deleteOldChainIds();\n    this.#checkScheduleFileDownloadForAllChains();\n    if (oldChainId !== id) {\n      if (chainStatus[id]?.dataFetched) {\n        this.#reinitPPOM().catch(() => {\n          console.error('Error in re-init of PPOM');\n        });\n      } else {\n        this.#resetPPOM();\n      }\n    }\n  }\n\n  /*\n   * enable / disable PPOM validations as user changes preferences\n   */\n  #onPreferenceChange(preferenceControllerState: any): void {\n    const blockaidEnabled = preferenceControllerState.securityAlertsEnabled;\n    if (blockaidEnabled === this.#securityAlertsEnabled) {\n      return;\n    }\n    this.#securityAlertsEnabled = blockaidEnabled;\n    if (blockaidEnabled) {\n      this.#checkScheduleFileDownloadForAllChains();\n    } else {\n      this.#resetToInactiveState();\n    }\n  }\n\n  /*\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:usePPOM` as const,\n      this.usePPOM.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updatePPOM` as const,\n      this.updatePPOM.bind(this),\n    );\n  }\n\n  /*\n   * The function resets PPOM.\n   */\n  #resetPPOM(): void {\n    if (this.#ppom) {\n      this.#ppom.free();\n      this.#ppom = undefined;\n    }\n  }\n\n  /*\n   * The function initialises PPOM.\n   */\n  async #reinitPPOM(): Promise<void> {\n    this.#resetPPOM();\n    this.#ppom = await this.#getPPOM();\n  }\n\n  /**\n   * Conditionally update the ppom configuration.\n   *\n   * The function will check if files are required to be downloaded and\n   * if needed will re-initialise PPOM passing new network files to it.\n   */\n  async #reinitPPOMForNetworkIfRequired(): Promise<void> {\n    if (this.#isDataRequiredForCurrentChain()) {\n      await this.#getNewFilesForCurrentChain();\n    }\n\n    if (!this.#ppom) {\n      await this.#reinitPPOM();\n    }\n  }\n\n  /*\n   * The function will return true if data is not already fetched for current chain.\n   */\n  #isDataRequiredForCurrentChain(): boolean {\n    const { chainStatus } = this.state;\n    return !chainStatus[this.#chainId]?.dataFetched;\n  }\n\n  /*\n   * Update the PPOM configuration for all chainId.\n   * If new version info file is available the function will update data files for all chains.\n   */\n  async #updatePPOM(): Promise<void> {\n    const versionInfoUpdated = await this.#updateVersionInfo();\n    if (versionInfoUpdated) {\n      await this.#getNewFilesForAllChains();\n      await this.#reinitPPOMForNetworkIfRequired();\n    }\n  }\n\n  /*\n   * Fetch the version info from the CDN and update the version info in state.\n   * Function returns true if update is available for versionInfo.\n   */\n  async #updateVersionInfo(): Promise<boolean> {\n    const versionInfo = await this.#fetchVersionInfo();\n    if (versionInfo) {\n      this.update((draftState) => {\n        draftState.versionInfo = versionInfo;\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /*\n   * The function checks if file is already present in the storage.\n   */\n  #checkFilePresentInStorage(\n    storageMetadata: FileMetadataList,\n    fileVersionInfo: PPOMFileVersion,\n  ): FileMetadata | undefined {\n    return storageMetadata.find(\n      (file) =>\n        file.name === fileVersionInfo.name &&\n        file.chainId === fileVersionInfo.chainId &&\n        file.version === fileVersionInfo.version &&\n        file.checksum === fileVersionInfo.checksum,\n    );\n  }\n\n  // todo: function below can be utility function\n  /*\n   * The function check to ensure that file path can contain only alphanumeric\n   * characters and a dot character (.) or slash (/).\n   */\n  #checkFilePath(filePath: string): void {\n    const filePathRegex = /^[\\w./]+$/u;\n    if (!filePath.match(filePathRegex)) {\n      throw new Error(`Invalid file path for data file: ${filePath}`);\n    }\n  }\n\n  /*\n   * Gets a single file from CDN and write to the storage.\n   */\n  async #getFile(\n    fileVersionInfo: PPOMFileVersion,\n    storageFoundCorrupted?: boolean,\n  ): Promise<ArrayBuffer | undefined> {\n    const { storageMetadata } = this.state;\n    // do not fetch file if the storage version is latest\n    if (\n      !storageFoundCorrupted &&\n      this.#checkFilePresentInStorage(storageMetadata, fileVersionInfo)\n    ) {\n      return undefined;\n    }\n    // validate file path for valid characters\n    this.#checkFilePath(fileVersionInfo.filePath);\n    const fileUrl = constructURLHref(\n      this.#cdnBaseUrl,\n      fileVersionInfo.filePath,\n    );\n    const fileData = await this.#fetchBlob(fileUrl);\n\n    const hash = SHA256(CryptoJS.lib.WordArray.create(fileData as any));\n    const hashString = hash.toString();\n    await validateSignature(\n      hashString,\n      fileVersionInfo.hashSignature,\n      this.#blockaidPublicKey,\n      fileVersionInfo.filePath,\n    );\n\n    await this.#storage.writeFile({\n      data: fileData,\n      ...fileVersionInfo,\n    });\n\n    return fileData;\n  }\n\n  /*\n   * As files for a chain are fetched this function set dataFetched\n   * property for that chainId in chainStatus to true.\n   */\n  async #setChainIdDataFetched(chainId: string): Promise<void> {\n    const { chainStatus, versionInfo } = this.state;\n    const chainIdObject = chainStatus[chainId];\n    const versionInfoForChain = versionInfo.filter(\n      ({ chainId: id }) => id === chainId,\n    );\n    if (chainIdObject) {\n      if (!chainIdObject.dataFetched) {\n        this.update((draftState) => {\n          draftState.chainStatus = {\n            ...chainStatus,\n            [chainId]: {\n              ...chainIdObject,\n              dataFetched: true,\n              versionInfo: versionInfoForChain,\n            },\n          };\n        });\n      }\n    }\n  }\n\n  /*\n   * Fetches new files for current network and save them to storage.\n   * The function is invoked if user if attempting transaction for current network,\n   * for which data is not previously fetched.\n   */\n  async #getNewFilesForCurrentChain(): Promise<void> {\n    for (const fileVersionInfo of this.state.versionInfo) {\n      if (fileVersionInfo.chainId !== this.#chainId) {\n        continue;\n      }\n\n      await this.#getFile(fileVersionInfo).catch((exp: Error) => {\n        console.error(\n          `Error in getting file ${fileVersionInfo.filePath}: ${exp.message}`,\n        );\n      });\n    }\n    await this.#setChainIdDataFetched(this.#chainId);\n    await this.#reinitPPOM();\n  }\n\n  /*\n   * Function creates list of all files to be fetched for all chainIds in chainStatus.\n   */\n  async #getListOfFilesToBeFetched(): Promise<\n    {\n      fileVersionInfo: PPOMFileVersion;\n      isLastFileOfNetwork: boolean;\n    }[]\n  > {\n    const {\n      chainStatus,\n      storageMetadata,\n      versionInfo: stateVersionInfo,\n    } = this.state;\n    const networkIsSupported = this.#networkIsSupported.bind(this);\n    // create a map of chainId and files belonging to that chainId\n    // not include the files for which the version in storage is the latest one\n    // As we add support for multiple chains it will be useful to sort the chain in desc order of lastvisited\n    const chainIdsFileInfoList = Object.keys(chainStatus)\n      .filter(networkIsSupported)\n      .map((chainId): { chainId: string; versionInfo: PPOMFileVersion[] } => ({\n        chainId,\n        versionInfo: stateVersionInfo.filter(\n          (versionInfo) =>\n            versionInfo.chainId === chainId &&\n            !this.#checkFilePresentInStorage(storageMetadata, versionInfo),\n        ),\n      }));\n\n    // build a list of files to be fetched for all networks\n    const fileToBeFetchedList: {\n      fileVersionInfo: PPOMFileVersion;\n      isLastFileOfNetwork: boolean;\n    }[] = [];\n    chainIdsFileInfoList.forEach((chainIdFileInfo) => {\n      const { versionInfo } = chainIdFileInfo;\n      versionInfo.forEach((fileVersionInfo, index) => {\n        fileToBeFetchedList.push({\n          fileVersionInfo,\n          isLastFileOfNetwork: index === versionInfo.length - 1,\n        });\n      });\n    });\n\n    return fileToBeFetchedList;\n  }\n\n  /*\n   * Delete from chainStatus chainIds of networks visited more than one week ago.\n   * Do not delete current ChainId.\n   */\n  #deleteOldChainIds(): void {\n    // We keep minimum of 2 chainIds in the state\n    if (\n      Object.keys(this.state.chainStatus)?.length <= NETWORK_CACHE_LIMIT.MIN\n    ) {\n      return;\n    }\n    const currentTimestamp = new Date().getTime();\n\n    const chainIds = Object.keys(this.state.chainStatus);\n    const oldChaninIds: any[] = chainIds.filter(\n      (chainId) =>\n        (this.state.chainStatus[chainId] as any).lastVisited <\n          currentTimestamp - NETWORK_CACHE_DURATION &&\n        chainId !== this.#chainId,\n    );\n\n    if (chainIds.length > NETWORK_CACHE_LIMIT.MAX) {\n      const oldestChainId = chainIds.sort(\n        (c1, c2) =>\n          Number(this.state.chainStatus[c2]?.lastVisited) -\n          Number(this.state.chainStatus[c1]?.lastVisited),\n      )[NETWORK_CACHE_LIMIT.MAX];\n      oldChaninIds.push(oldestChainId);\n    }\n\n    const chainStatus = { ...this.state.chainStatus };\n    oldChaninIds.forEach((chainId) => {\n      delete chainStatus[chainId];\n    });\n\n    this.update((draftState) => {\n      draftState.chainStatus = chainStatus;\n    });\n  }\n\n  /*\n   * Function that fetches and saves to storage files for all networks.\n   * Files are not fetched parallely but at regular intervals to\n   * avoid sending a lot of parallel requests to CDN.\n   */\n  async #getNewFilesForAllChains(): Promise<void> {\n    // clear existing scheduled task to fetch files if any\n    if (this.#fileScheduleInterval) {\n      clearInterval(this.#fileScheduleInterval);\n    }\n\n    // build a list of files to be fetched for all networks\n    const fileToBeFetchedList = await this.#getListOfFilesToBeFetched();\n\n    // Get scheduled interval, if schedule interval is large so that not all files can be fetched in\n    // this.#dataUpdateDuration, reduce schedule interval\n    let scheduleInterval = this.#fileFetchScheduleDuration;\n    if (\n      this.#dataUpdateDuration / (fileToBeFetchedList.length + 1) <\n      this.#fileFetchScheduleDuration\n    ) {\n      scheduleInterval =\n        this.#dataUpdateDuration / (fileToBeFetchedList.length + 1);\n    }\n\n    // schedule files to be fetched in regular intervals\n    this.#fileScheduleInterval = setInterval(() => {\n      const fileToBeFetched = fileToBeFetchedList.pop();\n\n      if (fileToBeFetched) {\n        const { chainStatus } = this.state;\n        const { fileVersionInfo, isLastFileOfNetwork } = fileToBeFetched;\n        // check here if chain is present in chainStatus, it may be removed from chainStatus\n        // if more than 5 networks are added to it.\n        if (chainStatus[fileVersionInfo.chainId]) {\n          // get the file from CDN\n          this.#getFile(fileVersionInfo)\n            .then(async () => {\n              if (isLastFileOfNetwork) {\n                // if this was last file for the chainId set dataFetched for chainId to true\n                await this.#setChainIdDataFetched(fileVersionInfo.chainId);\n                if (fileVersionInfo.chainId === this.#chainId) {\n                  await this.#reinitPPOM();\n                }\n              }\n            })\n            .catch((exp: Error) =>\n              console.error(\n                `Error in getting file ${fileVersionInfo.filePath}: ${exp.message}`,\n              ),\n            );\n        }\n      }\n      // clear interval if all files are fetched\n      if (!fileToBeFetchedList.length) {\n        clearInterval(this.#fileScheduleInterval);\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.#storage.syncMetadata(this.state.versionInfo);\n      }\n    }, scheduleInterval);\n  }\n\n  /*\n   * Generic method to fetch file from CDN.\n   */\n  async #getAPIResponse(\n    url: string,\n    options: Record<string, unknown> = {},\n    method = 'GET',\n  ): Promise<any> {\n    const response = await safelyExecute(\n      async () =>\n        timeoutFetch(\n          url,\n          {\n            method,\n            cache: 'no-cache',\n            redirect: 'error',\n            ...options,\n          },\n          10000,\n        ),\n      true,\n    );\n    if (response?.status !== 200) {\n      throw new Error(`Failed to fetch file with url: ${url}`);\n    }\n    return response;\n  }\n\n  /*\n   * Function sends a HEAD request to version info file and compares the ETag to the one saved in controller state.\n   * If ETag is not changed we can be sure that there is not change in files and we do not need to fetch data again.\n   */\n  async #checkIfVersionInfoETagChanged(url: string): Promise<boolean> {\n    const headResponse = await this.#getAPIResponse(\n      url,\n      {\n        headers: versionInfoFileHeaders,\n      },\n      'HEAD',\n    );\n\n    const { versionFileETag } = this.state;\n    if (headResponse.headers.get('ETag') === versionFileETag) {\n      return false;\n    }\n\n    this.update((draftState) => {\n      draftState.versionFileETag = headResponse.headers.get('ETag');\n    });\n\n    return true;\n  }\n\n  /*\n   * Fetch the version info from the PPOM cdn.\n   */\n  async #fetchVersionInfo(): Promise<PPOMVersionResponse | undefined> {\n    const url = constructURLHref(this.#cdnBaseUrl, PPOM_VERSION_FILE_NAME);\n\n    // If ETag is same it is not required to fetch data files again\n    const eTagChanged = await this.#checkIfVersionInfoETagChanged(url);\n    if (!eTagChanged) {\n      return undefined;\n    }\n\n    const response = await this.#getAPIResponse(url, {\n      headers: versionInfoFileHeaders,\n    });\n    return response.json();\n  }\n\n  /*\n   * Fetch the blob file from the PPOM cdn.\n   */\n  async #fetchBlob(url: string): Promise<ArrayBuffer> {\n    const response = await this.#getAPIResponse(url);\n    return await response.arrayBuffer();\n  }\n\n  /*\n   * Send a JSON RPC request to the provider.\n   * This method is used by the PPOM to make requests to the provider.\n   */\n  async #jsonRpcRequest(\n    method: string,\n    params: Record<string, unknown>,\n  ): Promise<any> {\n    return new Promise((resolve) => {\n      // Resolve with error if number of requests from PPOM to provider exceeds the limit for the current transaction\n      if (this.#providerRequests > this.#providerRequestLimit) {\n        resolve(PROVIDER_ERRORS.limitExceeded());\n        return;\n      }\n      this.#providerRequests += 1;\n      // Resolve with error if the provider method called by PPOM is not allowed for PPOM\n      if (!ALLOWED_PROVIDER_CALLS.includes(method)) {\n        resolve(PROVIDER_ERRORS.methodNotSupported());\n        return;\n      }\n\n      this.#providerRequestsCount[method] = this.#providerRequestsCount[method]\n        ? Number(this.#providerRequestsCount[method]) + 1\n        : 1;\n\n      // Invoke provider and return result\n      this.#provider.sendAsync(\n        createPayload(method, params),\n        (error: Error, res: any) => {\n          if (error) {\n            resolve({\n              jsonrpc: '2.0',\n              id: IdGenerator(),\n              error,\n            });\n          } else {\n            resolve(res);\n          }\n        },\n      );\n    });\n  }\n\n  /*\n   * This function can be called to initialise PPOM or re-initilise it,\n   * when new files are required to be passed to it.\n   *\n   * It will load the data files from storage and pass data files and wasm file to ppom.\n   */\n  async #getPPOM(): Promise<any> {\n    // For some reason ppom initialisation in contrructor fails for react native\n    // thus it is added here to prevent validation from failing.\n    await this.#initialisePPOM();\n\n    this.#ppomInitError = undefined;\n    const { chainStatus } = this.state;\n    const chainInfo = chainStatus[this.#chainId];\n    if (!chainInfo?.versionInfo?.length) {\n      this.#ppomInitError = `Aborting validation as no files are found for the network with chainId: ${\n        this.#chainId\n      }`;\n      return undefined;\n    }\n    // Get all the files for  the chainId\n    let files = await Promise.all(\n      chainInfo.versionInfo.map(async (file) => {\n        let data: ArrayBuffer | undefined;\n        try {\n          // First try to get file from storage\n          data = await this.#storage.readFile(file.name, file.chainId);\n        } catch {\n          try {\n            // Get the file from CDN if it is not found in storage\n            data = await this.#getFile(file, true);\n          } catch (exp: unknown) {\n            console.error(\n              `Error in getting file ${file.filePath}: ${\n                (exp as Error).message\n              }`,\n            );\n          }\n        }\n        if (data) {\n          return [file.name, new Uint8Array(data)];\n        }\n        return undefined;\n      }),\n    );\n\n    files = files.filter((data: unknown) => data !== undefined);\n\n    // The following code throw error if no data files are found for the chainId.\n    // This check has been put in place after suggestion of security team.\n    // If we want to disable ppom validation on all instances of Metamask,\n    // this can be achieved by returning empty data from version file.\n    if (files.length !== chainInfo?.versionInfo?.length) {\n      this.#ppomInitError = `Aborting validation as not all files could not be downloaded for the network with chainId: ${\n        this.#chainId\n      }`;\n      return undefined;\n    }\n\n    return await this.#ppomMutex.use(async () => {\n      const { PPOM } = this.#ppomProvider;\n      return PPOM.new(this.#jsonRpcRequest.bind(this), files);\n    });\n  }\n\n  /**\n   * Functioned to be called to update PPOM.\n   */\n  #onDataUpdateDuration(): void {\n    this.updatePPOM().catch((exp: Error) => {\n      console.error(`Error while trying to update PPOM: ${exp.message}`);\n    });\n  }\n\n  /*\n   * The function invokes the task to fetch files of all the chains and then\n   * starts the scheduled periodic task to fetch files for all the chains.\n   */\n  #checkScheduleFileDownloadForAllChains(): void {\n    if (\n      this.#securityAlertsEnabled &&\n      this.#chainStatusIncludeSupportedNetworks()\n    ) {\n      if (!this.#refreshDataInterval) {\n        this.#onDataUpdateDuration();\n        this.#refreshDataInterval = setInterval(\n          this.#onDataUpdateDuration.bind(this),\n          this.#dataUpdateDuration,\n        );\n      }\n    } else {\n      this.#resetToInactiveState();\n    }\n  }\n}\n"]}
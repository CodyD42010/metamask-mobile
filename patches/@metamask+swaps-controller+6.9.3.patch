diff --git a/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.d.ts b/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.d.ts
index 43f7356..431af06 100644
--- a/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.d.ts
+++ b/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.d.ts
@@ -23,10 +23,28 @@ export interface NetworkFeatureFlags {
     mobile_active: boolean;
     extension_active: boolean;
     fallback_to_v1?: boolean;
+    smartTransactions: {
+        expectedDeadline: number;
+        maxDeadline: number;
+        returnTxHashAsap: boolean;
+    };
 }
 export interface NetworksFeatureStatus {
     [network: string]: NetworkFeatureFlags;
 }
+export interface GlobalFeatureFlags {
+    smart_transactions: {
+        mobile_active: boolean;
+        extension_active: boolean;
+    };
+    smartTransactions: {
+        mobileActive: boolean;
+        extensionActive: boolean;
+        mobileActiveIOS: boolean;
+        mobileActiveAndroid: boolean;
+    };
+}
+export declare type FeatureFlags = NetworksFeatureStatus & GlobalFeatureFlags;
 /**
  * Metadata needed to fetch quotes
  *
diff --git a/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.js.map b/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.js.map
index 628b6a7..426dec5 100644
--- a/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.js.map
+++ b/node_modules/@metamask/swaps-controller/dist/swapsInterfaces.js.map
@@ -1 +1 @@
-{"version":3,"file":"swapsInterfaces.js","sourceRoot":"","sources":["../src/swapsInterfaces.ts"],"names":[],"mappings":";;;AAGA,IAAY,OAQX;AARD,WAAY,OAAO;IACjB,4BAAiB,CAAA;IACjB,4BAAiB,CAAA;IACjB,oCAAyB,CAAA;IACzB,wCAA6B,CAAA;IAC7B,sDAA2C,CAAA;IAC3C,0BAAe,CAAA;IACf,oCAAyB,CAAA;AAC3B,CAAC,EARW,OAAO,GAAP,eAAO,KAAP,eAAO,QAQlB","sourcesContent":["import { Transaction } from '@metamask/controllers';\nimport { BigNumber } from 'bignumber.js';\n\nexport enum APIType {\n  TRADES = 'TRADES',\n  TOKENS = 'TOKENS',\n  TOP_ASSETS = 'TOP_ASSETS',\n  FEATURE_FLAG = 'FEATURE_FLAG',\n  AGGREGATOR_METADATA = 'AGGREGATOR_METADATA',\n  TOKEN = 'TOKEN',\n  GAS_PRICES = 'GAS_PRICES',\n}\n\nexport interface SwapsAsset {\n  address: string;\n  symbol: string;\n  name?: string;\n}\n\nexport interface SwapsToken extends SwapsAsset {\n  decimals: number;\n  occurrences?: number;\n  iconUrl?: string;\n}\n\nexport interface NetworkFeatureFlags {\n  // eslint-disable-next-line camelcase\n  mobile_active: boolean;\n  // eslint-disable-next-line camelcase\n  extension_active: boolean;\n  // eslint-disable-next-line camelcase\n  fallback_to_v1?: boolean;\n}\n\nexport interface NetworksFeatureStatus {\n  [network: string]: NetworkFeatureFlags;\n}\n\n/**\n * Metadata needed to fetch quotes\n *\n * @interface APIFetchQuotesMetadata\n *\n * @property sourceTokenInfo - Source token information\n * @property destinationTokenInfo - Destination token information\n *\n */\nexport interface APIFetchQuotesMetadata {\n  sourceTokenInfo: SwapsToken;\n  destinationTokenInfo: SwapsToken;\n}\n\n/**\n * Parameters needed to fetch quotes\n *\n * @interface APIFetchQuotesParams\n *\n * @property slippage - Slippage\n * @property sourceToken - Source token address\n * @property sourceAmount - Source token amount\n * @property destinationToken - Destination token address\n * @property walletAddress - Address to do the swap from\n * @property exchangeList\n * @property metaData - Metadata needed to fetch quotes\n *\n */\nexport interface APIFetchQuotesParams {\n  slippage: number;\n  sourceToken: string;\n  sourceAmount: number;\n  destinationToken: string;\n  walletAddress: string;\n  timeout?: number;\n  clientId?: string;\n  enableDirectWrapping?: boolean;\n}\n\n/**\n * Aggregator metadata coming from API\n *\n * @interface APIAggregatorMetadata\n *\n */\nexport interface APIAggregatorMetadata {\n  color: string;\n  title: string;\n  icon: string;\n  iconPng: string;\n}\n\ninterface QuoteTransaction extends Transaction {\n  value: string;\n}\n\n/**\n * Savings of a quote\n *\n * @interface QuoteSavings\n */\nexport interface QuoteSavings {\n  total: BigNumber;\n  performance: BigNumber;\n  fee: BigNumber;\n  medianMetaMaskFee: BigNumber;\n}\n\n/**\n * Trade data structure coming from API, together with savings and gas estimations.\n *\n * @interface Quote\n *\n * @property trade - The ethereum transaction data for the swap\n * @property approvalNeeded - Ethereum transaction to complete a ERC20 approval, if needed\n * @property sourceAmount - Amount in minimal unit to send\n * @property destinationAmount - Amount in minimal unit to receive\n * @property error - Trade error, if any\n * @property sourceToken - Source token address\n * @property destinationToken - Destination token address\n * @property maxGas - Maximum gas to use\n * @property averageGas - Average gas to use\n * @property estimatedRefund - Destination token address\n * @property fetchTime - Fetch time\n * @property fee - MetaMask fee\n * @property quoteRefreshSeconds - Refresh quotes time\n * @property gasMultiplier\n * @property aggregator - Aggregator id\n * @property aggType - Aggregator type\n * @property priceSlippage - Price slippage information object\n * @property savings - Estimation of savings\n * @property gasEstimate - Estimation of gas\n * @property gasEstimateWithRefund - Estimation of gas with refund\n */\nexport interface Quote {\n  trade: QuoteTransaction;\n  approvalNeeded: null | {\n    data: string;\n    to: string;\n    from: string;\n    gas: string;\n  };\n  sourceAmount: string;\n  destinationAmount: number;\n  error: null | Error;\n  sourceToken: string;\n  destinationToken: string;\n  maxGas: number;\n  averageGas: number;\n  estimatedRefund: number;\n  fetchTime: number;\n  aggregator: string;\n  aggType: string;\n  fee: number;\n  quoteRefreshSeconds: number;\n  gasMultiplier: number;\n  savings: QuoteSavings | null;\n  gasEstimate: string | null;\n  gasEstimateWithRefund: string | null;\n  destinationTokenRate: number | null;\n  sourceTokenRate: number | null;\n  multiLayerL1TradeFeeTotal: string | undefined;\n}\n\n/**\n * Fees and values information for an aggregator\n *\n * @interface QuoteValues\n *\n * @property aggregator - Aggregator id\n * @property ethFee - Fee in ETH\n * @property maxEthFee - Maximum fee in ETH\n * @property ethValueOfTokens - Total value of tokens in ETH\n * @property overallValueOfQuote\n * @property metaMaskFeeInEth - MetaMask fee in ETH\n */\nexport interface QuoteValues {\n  aggregator: string;\n  tradeGasLimit: string;\n  tradeMaxGasLimit: string;\n  ethFee: string;\n  maxEthFee: string;\n  ethValueOfTokens: string;\n  overallValueOfQuote: string;\n  metaMaskFeeInEth: string;\n}\n\n/**\n * Metadata needed to fetch quotes\n *\n * @interface TransactionReceipt\n *\n * @property blockHash - Hash of the block where this transaction was in\n * @property blockNumber - Block number where this transaction was in\n * @property transactionHash - Hash of the transaction\n * @property transactionIndex - Integer of the transactions index position in the block\n * @property from - Address of the sender\n * @property to - Address of the receiver. null when its a contract creation transaction\n * @property cumulativeGasUsed - The total amount of gas used when this transaction was executed in the block\n * @property gasUsed - The amount of gas used by this specific transaction alone\n * @property contractAddress - The contract address created, if the transaction was a contract creation, otherwise null\n * @property logs - Array of log objects, which this transaction generate\n * @property status - '0x0' indicates transaction failure , '0x1' indicates transaction succeeded.\n *\n */\nexport interface TransactionReceipt {\n  blockHash: string;\n  blockNumber: number;\n  transactionHash: string;\n  transactionIndex: number;\n  from: string;\n  to: string;\n  cumulativeGasUsed: number;\n  gasUsed: number;\n  contractAddress: string;\n  logs: { data: string; topics: string[]; address: string }[];\n  status: string;\n}\n\nexport interface ChainData {\n  aggregatorMetadata: null | { [key: string]: APIAggregatorMetadata };\n  tokens: null | SwapsToken[];\n  topAssets: null | SwapsAsset[];\n  aggregatorMetadataLastFetched: number;\n  tokensLastFetched: number;\n  topAssetsLastFetched: number;\n}\n\nexport interface ChainCache {\n  [key: string]: ChainData;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"swapsInterfaces.js","sourceRoot":"","sources":["../src/swapsInterfaces.ts"],"names":[],"mappings":";;;AAIA,IAAY,OAQX;AARD,WAAY,OAAO;IACjB,4BAAiB,CAAA;IACjB,4BAAiB,CAAA;IACjB,oCAAyB,CAAA;IACzB,wCAA6B,CAAA;IAC7B,sDAA2C,CAAA;IAC3C,0BAAe,CAAA;IACf,oCAAyB,CAAA;AAC3B,CAAC,EARW,OAAO,GAAP,eAAO,KAAP,eAAO,QAQlB","sourcesContent":["/* eslint-disable camelcase */\nimport { Transaction } from '@metamask/controllers';\nimport { BigNumber } from 'bignumber.js';\n\nexport enum APIType {\n  TRADES = 'TRADES',\n  TOKENS = 'TOKENS',\n  TOP_ASSETS = 'TOP_ASSETS',\n  FEATURE_FLAG = 'FEATURE_FLAG',\n  AGGREGATOR_METADATA = 'AGGREGATOR_METADATA',\n  TOKEN = 'TOKEN',\n  GAS_PRICES = 'GAS_PRICES',\n}\n\nexport interface SwapsAsset {\n  address: string;\n  symbol: string;\n  name?: string;\n}\n\nexport interface SwapsToken extends SwapsAsset {\n  decimals: number;\n  occurrences?: number;\n  iconUrl?: string;\n}\n\nexport interface NetworkFeatureFlags {\n  // eslint-disable-next-line camelcase\n  mobile_active: boolean;\n  // eslint-disable-next-line camelcase\n  extension_active: boolean;\n  // eslint-disable-next-line camelcase\n  fallback_to_v1?: boolean;\n\n  smartTransactions: {\n    expectedDeadline: number;\n    maxDeadline: number;\n    returnTxHashAsap: boolean;\n  };\n}\n\nexport interface NetworksFeatureStatus {\n  [network: string]: NetworkFeatureFlags;\n}\n\nexport interface GlobalFeatureFlags {\n  smart_transactions: {\n    mobile_active: boolean;\n    extension_active: boolean;\n  };\n  smartTransactions: {\n    mobileActive: boolean;\n    extensionActive: boolean;\n    mobileActiveIOS: boolean;\n    mobileActiveAndroid: boolean;\n  };\n}\n\nexport type FeatureFlags = NetworksFeatureStatus & GlobalFeatureFlags;\n\n/**\n * Metadata needed to fetch quotes\n *\n * @interface APIFetchQuotesMetadata\n *\n * @property sourceTokenInfo - Source token information\n * @property destinationTokenInfo - Destination token information\n *\n */\nexport interface APIFetchQuotesMetadata {\n  sourceTokenInfo: SwapsToken;\n  destinationTokenInfo: SwapsToken;\n}\n\n/**\n * Parameters needed to fetch quotes\n *\n * @interface APIFetchQuotesParams\n *\n * @property slippage - Slippage\n * @property sourceToken - Source token address\n * @property sourceAmount - Source token amount\n * @property destinationToken - Destination token address\n * @property walletAddress - Address to do the swap from\n * @property exchangeList\n * @property metaData - Metadata needed to fetch quotes\n *\n */\nexport interface APIFetchQuotesParams {\n  slippage: number;\n  sourceToken: string;\n  sourceAmount: number;\n  destinationToken: string;\n  walletAddress: string;\n  timeout?: number;\n  clientId?: string;\n  enableDirectWrapping?: boolean;\n}\n\n/**\n * Aggregator metadata coming from API\n *\n * @interface APIAggregatorMetadata\n *\n */\nexport interface APIAggregatorMetadata {\n  color: string;\n  title: string;\n  icon: string;\n  iconPng: string;\n}\n\ninterface QuoteTransaction extends Transaction {\n  value: string;\n}\n\n/**\n * Savings of a quote\n *\n * @interface QuoteSavings\n */\nexport interface QuoteSavings {\n  total: BigNumber;\n  performance: BigNumber;\n  fee: BigNumber;\n  medianMetaMaskFee: BigNumber;\n}\n\n/**\n * Trade data structure coming from API, together with savings and gas estimations.\n *\n * @interface Quote\n *\n * @property trade - The ethereum transaction data for the swap\n * @property approvalNeeded - Ethereum transaction to complete a ERC20 approval, if needed\n * @property sourceAmount - Amount in minimal unit to send\n * @property destinationAmount - Amount in minimal unit to receive\n * @property error - Trade error, if any\n * @property sourceToken - Source token address\n * @property destinationToken - Destination token address\n * @property maxGas - Maximum gas to use\n * @property averageGas - Average gas to use\n * @property estimatedRefund - Destination token address\n * @property fetchTime - Fetch time\n * @property fee - MetaMask fee\n * @property quoteRefreshSeconds - Refresh quotes time\n * @property gasMultiplier\n * @property aggregator - Aggregator id\n * @property aggType - Aggregator type\n * @property priceSlippage - Price slippage information object\n * @property savings - Estimation of savings\n * @property gasEstimate - Estimation of gas\n * @property gasEstimateWithRefund - Estimation of gas with refund\n */\nexport interface Quote {\n  trade: QuoteTransaction;\n  approvalNeeded: null | {\n    data: string;\n    to: string;\n    from: string;\n    gas: string;\n  };\n  sourceAmount: string;\n  destinationAmount: number;\n  error: null | Error;\n  sourceToken: string;\n  destinationToken: string;\n  maxGas: number;\n  averageGas: number;\n  estimatedRefund: number;\n  fetchTime: number;\n  aggregator: string;\n  aggType: string;\n  fee: number;\n  quoteRefreshSeconds: number;\n  gasMultiplier: number;\n  savings: QuoteSavings | null;\n  gasEstimate: string | null;\n  gasEstimateWithRefund: string | null;\n  destinationTokenRate: number | null;\n  sourceTokenRate: number | null;\n  multiLayerL1TradeFeeTotal: string | undefined;\n}\n\n/**\n * Fees and values information for an aggregator\n *\n * @interface QuoteValues\n *\n * @property aggregator - Aggregator id\n * @property ethFee - Fee in ETH\n * @property maxEthFee - Maximum fee in ETH\n * @property ethValueOfTokens - Total value of tokens in ETH\n * @property overallValueOfQuote\n * @property metaMaskFeeInEth - MetaMask fee in ETH\n */\nexport interface QuoteValues {\n  aggregator: string;\n  tradeGasLimit: string;\n  tradeMaxGasLimit: string;\n  ethFee: string;\n  maxEthFee: string;\n  ethValueOfTokens: string;\n  overallValueOfQuote: string;\n  metaMaskFeeInEth: string;\n}\n\n/**\n * Metadata needed to fetch quotes\n *\n * @interface TransactionReceipt\n *\n * @property blockHash - Hash of the block where this transaction was in\n * @property blockNumber - Block number where this transaction was in\n * @property transactionHash - Hash of the transaction\n * @property transactionIndex - Integer of the transactions index position in the block\n * @property from - Address of the sender\n * @property to - Address of the receiver. null when its a contract creation transaction\n * @property cumulativeGasUsed - The total amount of gas used when this transaction was executed in the block\n * @property gasUsed - The amount of gas used by this specific transaction alone\n * @property contractAddress - The contract address created, if the transaction was a contract creation, otherwise null\n * @property logs - Array of log objects, which this transaction generate\n * @property status - '0x0' indicates transaction failure , '0x1' indicates transaction succeeded.\n *\n */\nexport interface TransactionReceipt {\n  blockHash: string;\n  blockNumber: number;\n  transactionHash: string;\n  transactionIndex: number;\n  from: string;\n  to: string;\n  cumulativeGasUsed: number;\n  gasUsed: number;\n  contractAddress: string;\n  logs: { data: string; topics: string[]; address: string }[];\n  status: string;\n}\n\nexport interface ChainData {\n  aggregatorMetadata: null | { [key: string]: APIAggregatorMetadata };\n  tokens: null | SwapsToken[];\n  topAssets: null | SwapsAsset[];\n  aggregatorMetadataLastFetched: number;\n  tokensLastFetched: number;\n  topAssetsLastFetched: number;\n}\n\nexport interface ChainCache {\n  [key: string]: ChainData;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/swaps-controller/dist/swapsUtil.d.ts b/node_modules/@metamask/swaps-controller/dist/swapsUtil.d.ts
index 0204cab..312915b 100644
--- a/node_modules/@metamask/swaps-controller/dist/swapsUtil.d.ts
+++ b/node_modules/@metamask/swaps-controller/dist/swapsUtil.d.ts
@@ -1,7 +1,7 @@
 import { Transaction } from '@metamask/controllers';
 import { AbortSignal } from 'abort-controller';
 import { BigNumber } from 'bignumber.js';
-import { APIAggregatorMetadata, SwapsAsset, SwapsToken, APIType, Quote, APIFetchQuotesParams, QuoteValues, TransactionReceipt, NetworkFeatureFlags } from './swapsInterfaces';
+import { APIAggregatorMetadata, SwapsAsset, SwapsToken, APIType, Quote, APIFetchQuotesParams, QuoteValues, TransactionReceipt, NetworkFeatureFlags, FeatureFlags } from './swapsInterfaces';
 export * from './constants';
 export declare enum SwapsError {
     QUOTES_EXPIRED_ERROR = "quotes-expired",
@@ -29,6 +29,7 @@ export declare function fetchAggregatorMetadata(chainId: string, clientId?: stri
 }>;
 export declare function fetchTopAssets(chainId: string, clientId?: string): Promise<SwapsAsset[]>;
 export declare function fetchSwapsFeatureLiveness(chainId: string, clientId?: string): Promise<NetworkFeatureFlags | undefined>;
+export declare function fetchSwapsFeatureFlags(chainId: string, clientId?: string): Promise<FeatureFlags | undefined>;
 /**
  * Fetches gas prices from API URL
  * @param chainId Current chainId
diff --git a/node_modules/@metamask/swaps-controller/dist/swapsUtil.js b/node_modules/@metamask/swaps-controller/dist/swapsUtil.js
index 54a32d5..ceb7acf 100644
--- a/node_modules/@metamask/swaps-controller/dist/swapsUtil.js
+++ b/node_modules/@metamask/swaps-controller/dist/swapsUtil.js
@@ -10,7 +10,7 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
     for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.constructTxParams = exports.estimateGas = exports.calcTokenAmount = exports.calculateGasLimits = exports.getMedianEthValueQuote = exports.getMedian = exports.getSwapsTokensReceived = exports.calculateGasEstimateWithRefund = exports.fetchGasPrices = exports.fetchSwapsFeatureLiveness = exports.fetchTopAssets = exports.fetchAggregatorMetadata = exports.fetchTokens = exports.fetchTradesInfo = exports.getTokenMetadataURL = exports.getBaseApiURL = exports.shouldEnableDirectWrapping = exports.isValidContractAddress = exports.getSwapsContractAddress = exports.getNativeSwapsToken = exports.SwapsError = void 0;
+exports.constructTxParams = exports.estimateGas = exports.calcTokenAmount = exports.calculateGasLimits = exports.getMedianEthValueQuote = exports.getMedian = exports.getSwapsTokensReceived = exports.calculateGasEstimateWithRefund = exports.fetchGasPrices = exports.fetchSwapsFeatureFlags = exports.fetchSwapsFeatureLiveness = exports.fetchTopAssets = exports.fetchAggregatorMetadata = exports.fetchTokens = exports.fetchTradesInfo = exports.getTokenMetadataURL = exports.getBaseApiURL = exports.shouldEnableDirectWrapping = exports.isValidContractAddress = exports.getSwapsContractAddress = exports.getNativeSwapsToken = exports.SwapsError = void 0;
 const controllers_1 = require("@metamask/controllers");
 const bignumber_js_1 = require("bignumber.js");
 const ethereumjs_util_1 = require("ethereumjs-util");
@@ -172,6 +172,11 @@ async function fetchSwapsFeatureLiveness(chainId, clientId) {
     return status[networkName];
 }
 exports.fetchSwapsFeatureLiveness = fetchSwapsFeatureLiveness;
+async function fetchSwapsFeatureFlags(chainId, clientId) {
+    const status = await handleFetch(exports.getBaseApiURL(swapsInterfaces_1.APIType.FEATURE_FLAG, chainId), { method: 'GET', headers: getClientIdHeader(clientId) });
+    return status;
+}
+exports.fetchSwapsFeatureFlags = fetchSwapsFeatureFlags;
 /**
  * Fetches gas prices from API URL
  * @param chainId Current chainId
diff --git a/node_modules/@metamask/swaps-controller/dist/swapsUtil.js.map b/node_modules/@metamask/swaps-controller/dist/swapsUtil.js.map
index 67e4afc..2d8551d 100644
--- a/node_modules/@metamask/swaps-controller/dist/swapsUtil.js.map
+++ b/node_modules/@metamask/swaps-controller/dist/swapsUtil.js.map
@@ -1 +1 @@
-{"version":3,"file":"swapsUtil.js","sourceRoot":"","sources":["../src/swapsUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transaction, util } from '@metamask/controllers';\nimport { AbortSignal } from 'abort-controller';\nimport { BigNumber } from 'bignumber.js';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport {\n  ALLOWED_CONTRACT_ADDRESSES,\n  API_BASE_URL,\n  CHAIN_ID_TO_NAME_MAP,\n  DEV_BASE_URL,\n  ETH_CHAIN_ID,\n  GAS_API_BASE_URL,\n  MAX_GAS_LIMIT,\n  NATIVE_SWAPS_TOKEN_ADDRESS,\n  SWAPS_CONTRACT_ADDRESSES,\n  SWAPS_NATIVE_TOKEN_OBJECTS,\n  SWAPS_TESTNET_CHAIN_ID,\n  SWAPS_WRAPPED_TOKENS_ADDRESSES,\n  TOKEN_TRANSFER_LOG_TOPIC_HASH,\n} from './constants';\nimport {\n  APIAggregatorMetadata,\n  SwapsAsset,\n  SwapsToken,\n  APIType,\n  Quote,\n  APIFetchQuotesParams,\n  QuoteValues,\n  TransactionReceipt,\n  NetworkFeatureFlags,\n  NetworksFeatureStatus,\n} from './swapsInterfaces';\n\nexport * from './constants';\n\nconst {\n  handleFetch,\n  timeoutFetch,\n  BNToHex,\n  query,\n  normalizeTransaction,\n} = util;\n\nexport enum SwapsError {\n  QUOTES_EXPIRED_ERROR = 'quotes-expired',\n  SWAP_FAILED_ERROR = 'swap-failed-error',\n  ERROR_FETCHING_QUOTES = 'error-fetching-quotes',\n  QUOTES_NOT_AVAILABLE_ERROR = 'quotes-not-available',\n  OFFLINE_FOR_MAINTENANCE = 'offline-for-maintenance',\n  SWAPS_FETCH_ORDER_CONFLICT = 'swaps-fetch-order-conflict',\n  SWAPS_GAS_PRICE_ESTIMATION = 'swaps-gas-price-estimation',\n  SWAPS_ALLOWANCE_TIMEOUT = 'swaps-allowance-timeout',\n  SWAPS_ALLOWANCE_ERROR = 'swaps-allowance-error',\n}\n\n// Functions\nfunction getClientIdHeader(clientId?: string) {\n  if (!clientId) {\n    return undefined;\n  }\n  return {\n    'X-Client-Id': clientId,\n  };\n}\n\nexport function getNativeSwapsToken(chainId: string): SwapsToken {\n  return SWAPS_NATIVE_TOKEN_OBJECTS[chainId];\n}\n\nexport function getSwapsContractAddress(chainId: string): string {\n  return SWAPS_CONTRACT_ADDRESSES[chainId];\n}\n\nexport function isValidContractAddress(\n  chainId: string,\n  contract: string | undefined,\n): boolean {\n  if (!contract || !ALLOWED_CONTRACT_ADDRESSES[chainId]) {\n    return false;\n  }\n  return ALLOWED_CONTRACT_ADDRESSES[chainId].some(\n    (allowedContract) =>\n      contract.toLowerCase() === allowedContract.toLowerCase(),\n  );\n}\n\nexport function shouldEnableDirectWrapping(\n  chainId: string,\n  sourceToken: string,\n  destinationToken: string,\n): boolean {\n  const wrappedTokenLowerCase = SWAPS_WRAPPED_TOKENS_ADDRESSES[\n    chainId\n  ]?.toLowerCase();\n  const nativeTokenLowerCase = SWAPS_NATIVE_TOKEN_OBJECTS[\n    chainId\n  ].address?.toLowerCase();\n  const sourceTokenLowerCase = sourceToken?.toLowerCase();\n  const destinationTokenLowerCase = destinationToken?.toLowerCase();\n  return (\n    (sourceTokenLowerCase === wrappedTokenLowerCase &&\n      destinationTokenLowerCase === nativeTokenLowerCase) ||\n    (sourceTokenLowerCase === nativeTokenLowerCase &&\n      destinationTokenLowerCase === wrappedTokenLowerCase)\n  );\n}\n\nexport const getBaseApiURL = function (type: APIType, chainId: string): string {\n  const [apiChainId, apiBaseUrl] =\n    chainId === SWAPS_TESTNET_CHAIN_ID\n      ? [ETH_CHAIN_ID, DEV_BASE_URL]\n      : [chainId, API_BASE_URL];\n  switch (type) {\n    case APIType.TRADES:\n      return `${apiBaseUrl}/networks/${apiChainId}/trades`;\n    case APIType.TOKENS:\n      return `${apiBaseUrl}/networks/${apiChainId}/tokens`;\n    case APIType.TOKEN:\n      return `${apiBaseUrl}/networks/${apiChainId}/token`;\n    case APIType.TOP_ASSETS:\n      return `${apiBaseUrl}/networks/${apiChainId}/topAssets`;\n    case APIType.FEATURE_FLAG:\n      return `${apiBaseUrl}/featureFlags`;\n    case APIType.AGGREGATOR_METADATA:\n      return `${apiBaseUrl}/networks/${apiChainId}/aggregatorMetadata`;\n    case APIType.GAS_PRICES:\n      return `${GAS_API_BASE_URL}/networks/${apiChainId}/gasPrices`;\n    default:\n      throw new Error('getBaseApiURL requires an api call type');\n  }\n};\n\nexport function getTokenMetadataURL(chainId: string): string {\n  return getBaseApiURL(APIType.TOKEN, chainId);\n}\n\nexport async function fetchTradesInfo(\n  {\n    slippage,\n    sourceToken,\n    sourceAmount,\n    destinationToken,\n    walletAddress,\n  }: APIFetchQuotesParams,\n  abortSignal: AbortSignal | null,\n  chainId: string,\n  clientId?: string,\n): Promise<{ [key: string]: Quote }> {\n  const urlParams: APIFetchQuotesParams = {\n    destinationToken,\n    sourceToken,\n    sourceAmount,\n    slippage,\n    timeout: 10000,\n    walletAddress,\n  };\n\n  if (clientId) {\n    urlParams.clientId = clientId;\n  }\n\n  if (shouldEnableDirectWrapping(chainId, sourceToken, destinationToken)) {\n    urlParams.enableDirectWrapping = true;\n  }\n\n  const tradeURL = `${getBaseApiURL(\n    APIType.TRADES,\n    chainId,\n  )}?${new URLSearchParams(urlParams as Record<any, any>).toString()}`;\n\n  const tradesResponse = await timeoutFetch(\n    tradeURL,\n    {\n      method: 'GET',\n      signal: abortSignal,\n      headers: getClientIdHeader(clientId),\n    },\n    15000,\n  );\n  const trades = (await tradesResponse.json()) as Quote[];\n  const newQuotes = trades.reduce(\n    (aggIdTradeMap: { [key: string]: Quote }, quote: Quote) => {\n      if (\n        !quote.error &&\n        quote.trade &&\n        isValidContractAddress(chainId, quote.trade?.to)\n      ) {\n        const constructedTrade = constructTxParams({\n          to: quote.trade.to,\n          from: quote.trade.from,\n          data: quote.trade.data,\n          amount: BNToHex(new BigNumber(quote.trade.value)),\n          gas: BNToHex(quote.maxGas || new BigNumber(MAX_GAS_LIMIT)),\n        });\n\n        return {\n          ...aggIdTradeMap,\n          [quote.aggregator]: {\n            ...quote,\n            slippage,\n            trade: constructedTrade,\n          },\n        };\n      }\n\n      return aggIdTradeMap;\n    },\n    {},\n  );\n\n  return newQuotes;\n}\n\nexport async function fetchTokens(\n  chainId: string,\n  clientId?: string,\n): Promise<SwapsToken[]> {\n  const tokenUrl = getBaseApiURL(APIType.TOKENS, chainId);\n  const tokens: SwapsToken[] = await handleFetch(tokenUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  const filteredTokens = tokens.filter((token) => {\n    return token.address !== NATIVE_SWAPS_TOKEN_ADDRESS;\n  });\n  filteredTokens.push(getNativeSwapsToken(chainId));\n  return filteredTokens;\n}\n\nexport async function fetchAggregatorMetadata(\n  chainId: string,\n  clientId?: string,\n) {\n  const aggregatorMetadataUrl = getBaseApiURL(\n    APIType.AGGREGATOR_METADATA,\n    chainId,\n  );\n  const aggregators: {\n    [key: string]: APIAggregatorMetadata;\n  } = await handleFetch(aggregatorMetadataUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  return aggregators;\n}\n\nexport async function fetchTopAssets(\n  chainId: string,\n  clientId?: string,\n): Promise<SwapsAsset[]> {\n  const topAssetsUrl = getBaseApiURL(APIType.TOP_ASSETS, chainId);\n  const response: SwapsAsset[] = await handleFetch(topAssetsUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  return response;\n}\n\nexport async function fetchSwapsFeatureLiveness(\n  chainId: string,\n  clientId?: string,\n): Promise<NetworkFeatureFlags | undefined> {\n  const status: NetworksFeatureStatus = await handleFetch(\n    getBaseApiURL(APIType.FEATURE_FLAG, chainId),\n    { method: 'GET', headers: getClientIdHeader(clientId) },\n  );\n  const networkName = CHAIN_ID_TO_NAME_MAP[chainId];\n  return status[networkName];\n}\n\n/**\n * Fetches gas prices from API URL\n * @param chainId Current chainId\n * @returns Gas prices represented as decimal GWEI strings\n */\nexport async function fetchGasPrices(\n  chainId: string,\n  clientId?: string,\n): Promise<{\n  safeGasPrice: string;\n  proposedGasPrice: string;\n  fastGasPrice: string;\n}> {\n  const { SafeGasPrice, ProposeGasPrice, FastGasPrice } = await handleFetch(\n    getBaseApiURL(APIType.GAS_PRICES, chainId),\n    {\n      method: 'GET',\n      headers: getClientIdHeader(clientId),\n    },\n  );\n  return {\n    safeGasPrice: SafeGasPrice,\n    proposedGasPrice: ProposeGasPrice,\n    fastGasPrice: FastGasPrice,\n  };\n}\n\nexport function calculateGasEstimateWithRefund(\n  maxGas: number | null,\n  estimatedRefund: number | null,\n  estimatedGas: string | null,\n): BigNumber {\n  const estimated = estimatedGas && addHexPrefix(estimatedGas);\n  const maxGasMinusRefund = new BigNumber(maxGas || MAX_GAS_LIMIT, 10).minus(\n    estimatedRefund || 0,\n  );\n  const estimatedGasBN = new BigNumber(estimated || '0x0');\n  const gasEstimateWithRefund = maxGasMinusRefund.lt(estimatedGasBN)\n    ? maxGasMinusRefund\n    : estimatedGasBN;\n  return gasEstimateWithRefund;\n}\n\n/**\n * Calculates token received from a transaction receipt together with an approval transaction receipt\n *\n * @param receipt - Swap transaction receipt\n * @param approvalReceipt - Approval transaction receipt needed for swaps if any\n * @param transaction - Swap transaction object\n * @param approvalTransaction - Approval transaction object needed for swaps if any\n * @param destinationToken - Destination token object\n * @param previousBalance - Previous swap ETH balance\n * @param postBalance - Post swap ETH balance\n * @returns - Tokens received in hex minimal unit\n */\nexport function getSwapsTokensReceived(\n  receipt: TransactionReceipt,\n  approvalReceipt: TransactionReceipt | null,\n  transaction: Transaction,\n  approvalTransaction: Transaction,\n  destinationToken: SwapsToken,\n  previousBalance: string,\n  postBalance: string,\n): string | undefined {\n  if (destinationToken.address === NATIVE_SWAPS_TOKEN_ADDRESS) {\n    const approvalTransactionGasCost = new BigNumber(\n      approvalTransaction?.gasPrice || '0x0',\n    ).times(approvalReceipt?.gasUsed || '0x0');\n    const transactionGas = new BigNumber(transaction?.gasPrice || '0x0').times(\n      receipt?.gasUsed || '0x0',\n    );\n    const totalGasCost = transactionGas.plus(approvalTransactionGasCost);\n\n    const previousBalanceMinusGas = new BigNumber(previousBalance).minus(\n      totalGasCost,\n    );\n    const postBalanceMinusGas = new BigNumber(postBalance);\n\n    return postBalanceMinusGas.minus(previousBalanceMinusGas).toString(16);\n  }\n\n  if (!receipt?.logs || receipt.status === '0x0') {\n    return;\n  }\n\n  const tokenTransferLog = receipt.logs.find(\n    (receiptLog: { topics: string[]; address: string }) => {\n      const isTokenTransfer =\n        receiptLog?.topics[0] === TOKEN_TRANSFER_LOG_TOPIC_HASH;\n      const isTransferFromGivenToken =\n        receiptLog.address === destinationToken.address;\n      const isTransferFromGivenAddress = receiptLog?.topics[2]?.match(\n        transaction.from.slice(2),\n      );\n      return (\n        isTokenTransfer &&\n        isTransferFromGivenToken &&\n        isTransferFromGivenAddress\n      );\n    },\n  );\n  if (!tokenTransferLog) {\n    return;\n  }\n  return tokenTransferLog.data;\n}\n\n/**\n * Calculates the median of a sample of BigNumber values.\n *\n * @param {BigNumber[]} values - A sample of BigNumber values.\n * @returns {BigNumber} The median of the sample.\n */\nexport function getMedian(values: BigNumber[]) {\n  if (!Array.isArray(values) || values.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n  const sorted = [...values].sort((a, b) => a.comparedTo(b));\n\n  if (sorted.length % 2 === 1) {\n    // return middle value\n    return sorted[(sorted.length - 1) / 2];\n  }\n  // return mean of middle two values\n  const upperIndex = sorted.length / 2;\n  return sorted[upperIndex].plus(sorted[upperIndex - 1]).div(2);\n}\n\n/**\n * Calculates the median overallValueOfQuote of a sample of quotes.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties\n * @returns {Object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote\n */\n\nexport function getMedianEthValueQuote(quotes: QuoteValues[]) {\n  if (!Array.isArray(quotes) || quotes.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n\n  quotes.sort((quoteA, quoteB) => {\n    const overallValueOfQuoteA = new BigNumber(quoteA.overallValueOfQuote, 10);\n    const overallValueOfQuoteB = new BigNumber(quoteB.overallValueOfQuote, 10);\n    return overallValueOfQuoteA.comparedTo(overallValueOfQuoteB);\n  });\n\n  if (quotes.length % 2 === 1) {\n    // return middle values\n    const medianOverallValue =\n      quotes[(quotes.length - 1) / 2].overallValueOfQuote;\n    const quotesMatchingMedianQuoteValue = quotes.filter(\n      (quote) => medianOverallValue === quote.overallValueOfQuote,\n    );\n    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);\n  }\n\n  // return mean of middle two values\n  const upperIndex = quotes.length / 2;\n  const lowerIndex = upperIndex - 1;\n\n  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;\n  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;\n\n  const quotesMatchingUpperIndexValue = quotes.filter(\n    (quote) => overallValueAtUpperIndex === quote.overallValueOfQuote,\n  );\n  const quotesMatchingLowerIndexValue = quotes.filter(\n    (quote) => overallValueAtLowerIndex === quote.overallValueOfQuote,\n  );\n\n  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingUpperIndexValue,\n  );\n  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingLowerIndexValue,\n  );\n\n  return {\n    ethFee: new BigNumber(feesAndValueAtUpperIndex.ethFee, 10)\n      .plus(feesAndValueAtLowerIndex.ethFee, 10)\n      .dividedBy(2)\n      .toString(10),\n    metaMaskFeeInEth: new BigNumber(\n      feesAndValueAtUpperIndex.metaMaskFeeInEth,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10)\n      .dividedBy(2)\n      .toString(10),\n    ethValueOfTokens: new BigNumber(\n      feesAndValueAtUpperIndex.ethValueOfTokens,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10)\n      .dividedBy(2)\n      .toString(10),\n  };\n}\n\n/**\n * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across\n * an array of objects containing those properties.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and\n * ethValueOfTokens properties\n * @returns {Object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of\n * the passed quote objects\n */\nfunction meansOfQuotesFeesAndValue(quotes: QuoteValues[]) {\n  const feeAndValueSumsAsBigNumbers = quotes.reduce(\n    (feeAndValueSums, quote) => ({\n      ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),\n      metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(\n        quote.metaMaskFeeInEth,\n        10,\n      ),\n      ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(\n        quote.ethValueOfTokens,\n        10,\n      ),\n    }),\n    {\n      ethFee: new BigNumber(0, 10),\n      metaMaskFeeInEth: new BigNumber(0, 10),\n      ethValueOfTokens: new BigNumber(0, 10),\n    },\n  );\n\n  return {\n    ethFee: feeAndValueSumsAsBigNumbers.ethFee\n      .div(quotes.length, 10)\n      .toString(10),\n    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth\n      .div(quotes.length, 10)\n      .toString(10),\n    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens\n      .div(quotes.length, 10)\n      .toString(10),\n  };\n}\n\nexport function calculateGasLimits(\n  approvalNeeded: boolean,\n  gasEstimateWithRefund: string | null,\n  gasEstimate: string | null,\n  averageGas: number,\n  maxGas: number,\n  gasMultiplier: number,\n  gasLimit: string | null,\n) {\n  let tradeGasLimit, tradeMaxGasLimit;\n  const customGasLimit = gasLimit && new BigNumber(gasLimit, 16);\n  if (\n    !approvalNeeded &&\n    gasEstimate &&\n    gasEstimateWithRefund &&\n    gasEstimateWithRefund !== '0'\n  ) {\n    tradeGasLimit = new BigNumber(gasEstimateWithRefund, 16);\n    tradeMaxGasLimit =\n      customGasLimit ||\n      new BigNumber(gasEstimate).times(gasMultiplier).integerValue();\n  } else {\n    tradeGasLimit = new BigNumber(averageGas || MAX_GAS_LIMIT, 10);\n    tradeMaxGasLimit =\n      customGasLimit || new BigNumber(maxGas || MAX_GAS_LIMIT, 10);\n  }\n  return { tradeGasLimit, tradeMaxGasLimit };\n}\n\nexport function calcTokenAmount(value: number | BigNumber, decimals: number) {\n  const multiplier = Math.pow(10, Number(decimals || 0));\n  return new BigNumber(value).div(multiplier);\n}\n\n/**\n * Estimates required gas for a given transaction\n *\n * @param transaction - Transaction object to estimate gas for\n * @returns - Promise resolving to an object containing gas and gasPrice\n */\nexport async function estimateGas(transaction: Transaction, ethQuery: any) {\n  const estimatedTransaction = { ...transaction };\n  const { value, data } = estimatedTransaction;\n  const { gasLimit } = await query(ethQuery, 'getBlockByNumber', [\n    'latest',\n    false,\n  ]);\n  estimatedTransaction.data = !data\n    ? data\n    : /* istanbul ignore next */ addHexPrefix(data);\n\n  // 3. If this is a contract address, safely estimate gas using RPC\n  estimatedTransaction.value =\n    typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n  const gasHex = await query(ethQuery, 'estimateGas', [estimatedTransaction]);\n  return { blockGasLimit: gasLimit, gas: addHexPrefix(gasHex) };\n}\n\n/**\n * Given the standard set of information about a transaction, returns a transaction properly formatted for\n * publishing via JSON RPC and web3\n *\n * @param {boolean} [sendToken] - Indicates whether or not the transaciton is a token transaction\n * @param {string} data - A hex string containing the data to include in the transaction\n * @param {string} to - A hex address of the tx recipient address\n * @param {string} amount - A hex amount, in case of a token tranaction will be set to Tx value\n * @param {string} from - A hex address of the tx sender address\n * @param {string} gas - A hex representation of the gas value for the transaction\n * @param {string} gasPrice - A hex representation of the gas price for the transaction\n * @returns {object} An object ready for submission to the blockchain, with all values appropriately hex prefixed\n */\nexport function constructTxParams({\n  sendToken,\n  data,\n  to,\n  amount,\n  from,\n  gas,\n  gasPrice,\n}: {\n  sendToken?: boolean;\n  data?: string;\n  to?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  amount?: string;\n}): any {\n  const txParams: Transaction = {\n    data,\n    from,\n    value: '0',\n    gas,\n    gasPrice,\n  };\n\n  if (!sendToken) {\n    txParams.value = amount;\n    txParams.to = to;\n  }\n  return normalizeTransaction(txParams);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"swapsUtil.js","sourceRoot":"","sources":["../src/swapsUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transaction, util } from '@metamask/controllers';\nimport { AbortSignal } from 'abort-controller';\nimport { BigNumber } from 'bignumber.js';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport {\n  ALLOWED_CONTRACT_ADDRESSES,\n  API_BASE_URL,\n  CHAIN_ID_TO_NAME_MAP,\n  DEV_BASE_URL,\n  ETH_CHAIN_ID,\n  GAS_API_BASE_URL,\n  MAX_GAS_LIMIT,\n  NATIVE_SWAPS_TOKEN_ADDRESS,\n  SWAPS_CONTRACT_ADDRESSES,\n  SWAPS_NATIVE_TOKEN_OBJECTS,\n  SWAPS_TESTNET_CHAIN_ID,\n  SWAPS_WRAPPED_TOKENS_ADDRESSES,\n  TOKEN_TRANSFER_LOG_TOPIC_HASH,\n} from './constants';\nimport {\n  APIAggregatorMetadata,\n  SwapsAsset,\n  SwapsToken,\n  APIType,\n  Quote,\n  APIFetchQuotesParams,\n  QuoteValues,\n  TransactionReceipt,\n  NetworkFeatureFlags,\n  FeatureFlags,\n} from './swapsInterfaces';\n\nexport * from './constants';\n\nconst {\n  handleFetch,\n  timeoutFetch,\n  BNToHex,\n  query,\n  normalizeTransaction,\n} = util;\n\nexport enum SwapsError {\n  QUOTES_EXPIRED_ERROR = 'quotes-expired',\n  SWAP_FAILED_ERROR = 'swap-failed-error',\n  ERROR_FETCHING_QUOTES = 'error-fetching-quotes',\n  QUOTES_NOT_AVAILABLE_ERROR = 'quotes-not-available',\n  OFFLINE_FOR_MAINTENANCE = 'offline-for-maintenance',\n  SWAPS_FETCH_ORDER_CONFLICT = 'swaps-fetch-order-conflict',\n  SWAPS_GAS_PRICE_ESTIMATION = 'swaps-gas-price-estimation',\n  SWAPS_ALLOWANCE_TIMEOUT = 'swaps-allowance-timeout',\n  SWAPS_ALLOWANCE_ERROR = 'swaps-allowance-error',\n}\n\n// Functions\nfunction getClientIdHeader(clientId?: string) {\n  if (!clientId) {\n    return undefined;\n  }\n  return {\n    'X-Client-Id': clientId,\n  };\n}\n\nexport function getNativeSwapsToken(chainId: string): SwapsToken {\n  return SWAPS_NATIVE_TOKEN_OBJECTS[chainId];\n}\n\nexport function getSwapsContractAddress(chainId: string): string {\n  return SWAPS_CONTRACT_ADDRESSES[chainId];\n}\n\nexport function isValidContractAddress(\n  chainId: string,\n  contract: string | undefined,\n): boolean {\n  if (!contract || !ALLOWED_CONTRACT_ADDRESSES[chainId]) {\n    return false;\n  }\n  return ALLOWED_CONTRACT_ADDRESSES[chainId].some(\n    (allowedContract) =>\n      contract.toLowerCase() === allowedContract.toLowerCase(),\n  );\n}\n\nexport function shouldEnableDirectWrapping(\n  chainId: string,\n  sourceToken: string,\n  destinationToken: string,\n): boolean {\n  const wrappedTokenLowerCase = SWAPS_WRAPPED_TOKENS_ADDRESSES[\n    chainId\n  ]?.toLowerCase();\n  const nativeTokenLowerCase = SWAPS_NATIVE_TOKEN_OBJECTS[\n    chainId\n  ].address?.toLowerCase();\n  const sourceTokenLowerCase = sourceToken?.toLowerCase();\n  const destinationTokenLowerCase = destinationToken?.toLowerCase();\n  return (\n    (sourceTokenLowerCase === wrappedTokenLowerCase &&\n      destinationTokenLowerCase === nativeTokenLowerCase) ||\n    (sourceTokenLowerCase === nativeTokenLowerCase &&\n      destinationTokenLowerCase === wrappedTokenLowerCase)\n  );\n}\n\nexport const getBaseApiURL = function (type: APIType, chainId: string): string {\n  const [apiChainId, apiBaseUrl] =\n    chainId === SWAPS_TESTNET_CHAIN_ID\n      ? [ETH_CHAIN_ID, DEV_BASE_URL]\n      : [chainId, API_BASE_URL];\n  switch (type) {\n    case APIType.TRADES:\n      return `${apiBaseUrl}/networks/${apiChainId}/trades`;\n    case APIType.TOKENS:\n      return `${apiBaseUrl}/networks/${apiChainId}/tokens`;\n    case APIType.TOKEN:\n      return `${apiBaseUrl}/networks/${apiChainId}/token`;\n    case APIType.TOP_ASSETS:\n      return `${apiBaseUrl}/networks/${apiChainId}/topAssets`;\n    case APIType.FEATURE_FLAG:\n      return `${apiBaseUrl}/featureFlags`;\n    case APIType.AGGREGATOR_METADATA:\n      return `${apiBaseUrl}/networks/${apiChainId}/aggregatorMetadata`;\n    case APIType.GAS_PRICES:\n      return `${GAS_API_BASE_URL}/networks/${apiChainId}/gasPrices`;\n    default:\n      throw new Error('getBaseApiURL requires an api call type');\n  }\n};\n\nexport function getTokenMetadataURL(chainId: string): string {\n  return getBaseApiURL(APIType.TOKEN, chainId);\n}\n\nexport async function fetchTradesInfo(\n  {\n    slippage,\n    sourceToken,\n    sourceAmount,\n    destinationToken,\n    walletAddress,\n  }: APIFetchQuotesParams,\n  abortSignal: AbortSignal | null,\n  chainId: string,\n  clientId?: string,\n): Promise<{ [key: string]: Quote }> {\n  const urlParams: APIFetchQuotesParams = {\n    destinationToken,\n    sourceToken,\n    sourceAmount,\n    slippage,\n    timeout: 10000,\n    walletAddress,\n  };\n\n  if (clientId) {\n    urlParams.clientId = clientId;\n  }\n\n  if (shouldEnableDirectWrapping(chainId, sourceToken, destinationToken)) {\n    urlParams.enableDirectWrapping = true;\n  }\n\n  const tradeURL = `${getBaseApiURL(\n    APIType.TRADES,\n    chainId,\n  )}?${new URLSearchParams(urlParams as Record<any, any>).toString()}`;\n\n  const tradesResponse = await timeoutFetch(\n    tradeURL,\n    {\n      method: 'GET',\n      signal: abortSignal,\n      headers: getClientIdHeader(clientId),\n    },\n    15000,\n  );\n  const trades = (await tradesResponse.json()) as Quote[];\n  const newQuotes = trades.reduce(\n    (aggIdTradeMap: { [key: string]: Quote }, quote: Quote) => {\n      if (\n        !quote.error &&\n        quote.trade &&\n        isValidContractAddress(chainId, quote.trade?.to)\n      ) {\n        const constructedTrade = constructTxParams({\n          to: quote.trade.to,\n          from: quote.trade.from,\n          data: quote.trade.data,\n          amount: BNToHex(new BigNumber(quote.trade.value)),\n          gas: BNToHex(quote.maxGas || new BigNumber(MAX_GAS_LIMIT)),\n        });\n\n        return {\n          ...aggIdTradeMap,\n          [quote.aggregator]: {\n            ...quote,\n            slippage,\n            trade: constructedTrade,\n          },\n        };\n      }\n\n      return aggIdTradeMap;\n    },\n    {},\n  );\n\n  return newQuotes;\n}\n\nexport async function fetchTokens(\n  chainId: string,\n  clientId?: string,\n): Promise<SwapsToken[]> {\n  const tokenUrl = getBaseApiURL(APIType.TOKENS, chainId);\n  const tokens: SwapsToken[] = await handleFetch(tokenUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  const filteredTokens = tokens.filter((token) => {\n    return token.address !== NATIVE_SWAPS_TOKEN_ADDRESS;\n  });\n  filteredTokens.push(getNativeSwapsToken(chainId));\n  return filteredTokens;\n}\n\nexport async function fetchAggregatorMetadata(\n  chainId: string,\n  clientId?: string,\n) {\n  const aggregatorMetadataUrl = getBaseApiURL(\n    APIType.AGGREGATOR_METADATA,\n    chainId,\n  );\n  const aggregators: {\n    [key: string]: APIAggregatorMetadata;\n  } = await handleFetch(aggregatorMetadataUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  return aggregators;\n}\n\nexport async function fetchTopAssets(\n  chainId: string,\n  clientId?: string,\n): Promise<SwapsAsset[]> {\n  const topAssetsUrl = getBaseApiURL(APIType.TOP_ASSETS, chainId);\n  const response: SwapsAsset[] = await handleFetch(topAssetsUrl, {\n    method: 'GET',\n    headers: getClientIdHeader(clientId),\n  });\n  return response;\n}\n\nexport async function fetchSwapsFeatureLiveness(\n  chainId: string,\n  clientId?: string,\n): Promise<NetworkFeatureFlags | undefined> {\n  const status: FeatureFlags = await handleFetch(\n    getBaseApiURL(APIType.FEATURE_FLAG, chainId),\n    { method: 'GET', headers: getClientIdHeader(clientId) },\n  );\n  const networkName = CHAIN_ID_TO_NAME_MAP[chainId];\n  return status[networkName];\n}\n\nexport async function fetchSwapsFeatureFlags(\n  chainId: string,\n  clientId?: string,\n): Promise<FeatureFlags | undefined> {\n  const status: FeatureFlags = await handleFetch(\n    getBaseApiURL(APIType.FEATURE_FLAG, chainId),\n    { method: 'GET', headers: getClientIdHeader(clientId) },\n  );\n\n  return status;\n}\n\n/**\n * Fetches gas prices from API URL\n * @param chainId Current chainId\n * @returns Gas prices represented as decimal GWEI strings\n */\nexport async function fetchGasPrices(\n  chainId: string,\n  clientId?: string,\n): Promise<{\n  safeGasPrice: string;\n  proposedGasPrice: string;\n  fastGasPrice: string;\n}> {\n  const { SafeGasPrice, ProposeGasPrice, FastGasPrice } = await handleFetch(\n    getBaseApiURL(APIType.GAS_PRICES, chainId),\n    {\n      method: 'GET',\n      headers: getClientIdHeader(clientId),\n    },\n  );\n  return {\n    safeGasPrice: SafeGasPrice,\n    proposedGasPrice: ProposeGasPrice,\n    fastGasPrice: FastGasPrice,\n  };\n}\n\nexport function calculateGasEstimateWithRefund(\n  maxGas: number | null,\n  estimatedRefund: number | null,\n  estimatedGas: string | null,\n): BigNumber {\n  const estimated = estimatedGas && addHexPrefix(estimatedGas);\n  const maxGasMinusRefund = new BigNumber(maxGas || MAX_GAS_LIMIT, 10).minus(\n    estimatedRefund || 0,\n  );\n  const estimatedGasBN = new BigNumber(estimated || '0x0');\n  const gasEstimateWithRefund = maxGasMinusRefund.lt(estimatedGasBN)\n    ? maxGasMinusRefund\n    : estimatedGasBN;\n  return gasEstimateWithRefund;\n}\n\n/**\n * Calculates token received from a transaction receipt together with an approval transaction receipt\n *\n * @param receipt - Swap transaction receipt\n * @param approvalReceipt - Approval transaction receipt needed for swaps if any\n * @param transaction - Swap transaction object\n * @param approvalTransaction - Approval transaction object needed for swaps if any\n * @param destinationToken - Destination token object\n * @param previousBalance - Previous swap ETH balance\n * @param postBalance - Post swap ETH balance\n * @returns - Tokens received in hex minimal unit\n */\nexport function getSwapsTokensReceived(\n  receipt: TransactionReceipt,\n  approvalReceipt: TransactionReceipt | null,\n  transaction: Transaction,\n  approvalTransaction: Transaction,\n  destinationToken: SwapsToken,\n  previousBalance: string,\n  postBalance: string,\n): string | undefined {\n  if (destinationToken.address === NATIVE_SWAPS_TOKEN_ADDRESS) {\n    const approvalTransactionGasCost = new BigNumber(\n      approvalTransaction?.gasPrice || '0x0',\n    ).times(approvalReceipt?.gasUsed || '0x0');\n    const transactionGas = new BigNumber(transaction?.gasPrice || '0x0').times(\n      receipt?.gasUsed || '0x0',\n    );\n    const totalGasCost = transactionGas.plus(approvalTransactionGasCost);\n\n    const previousBalanceMinusGas = new BigNumber(previousBalance).minus(\n      totalGasCost,\n    );\n    const postBalanceMinusGas = new BigNumber(postBalance);\n\n    return postBalanceMinusGas.minus(previousBalanceMinusGas).toString(16);\n  }\n\n  if (!receipt?.logs || receipt.status === '0x0') {\n    return;\n  }\n\n  const tokenTransferLog = receipt.logs.find(\n    (receiptLog: { topics: string[]; address: string }) => {\n      const isTokenTransfer =\n        receiptLog?.topics[0] === TOKEN_TRANSFER_LOG_TOPIC_HASH;\n      const isTransferFromGivenToken =\n        receiptLog.address === destinationToken.address;\n      const isTransferFromGivenAddress = receiptLog?.topics[2]?.match(\n        transaction.from.slice(2),\n      );\n      return (\n        isTokenTransfer &&\n        isTransferFromGivenToken &&\n        isTransferFromGivenAddress\n      );\n    },\n  );\n  if (!tokenTransferLog) {\n    return;\n  }\n  return tokenTransferLog.data;\n}\n\n/**\n * Calculates the median of a sample of BigNumber values.\n *\n * @param {BigNumber[]} values - A sample of BigNumber values.\n * @returns {BigNumber} The median of the sample.\n */\nexport function getMedian(values: BigNumber[]) {\n  if (!Array.isArray(values) || values.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n  const sorted = [...values].sort((a, b) => a.comparedTo(b));\n\n  if (sorted.length % 2 === 1) {\n    // return middle value\n    return sorted[(sorted.length - 1) / 2];\n  }\n  // return mean of middle two values\n  const upperIndex = sorted.length / 2;\n  return sorted[upperIndex].plus(sorted[upperIndex - 1]).div(2);\n}\n\n/**\n * Calculates the median overallValueOfQuote of a sample of quotes.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties\n * @returns {Object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote\n */\n\nexport function getMedianEthValueQuote(quotes: QuoteValues[]) {\n  if (!Array.isArray(quotes) || quotes.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n\n  quotes.sort((quoteA, quoteB) => {\n    const overallValueOfQuoteA = new BigNumber(quoteA.overallValueOfQuote, 10);\n    const overallValueOfQuoteB = new BigNumber(quoteB.overallValueOfQuote, 10);\n    return overallValueOfQuoteA.comparedTo(overallValueOfQuoteB);\n  });\n\n  if (quotes.length % 2 === 1) {\n    // return middle values\n    const medianOverallValue =\n      quotes[(quotes.length - 1) / 2].overallValueOfQuote;\n    const quotesMatchingMedianQuoteValue = quotes.filter(\n      (quote) => medianOverallValue === quote.overallValueOfQuote,\n    );\n    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);\n  }\n\n  // return mean of middle two values\n  const upperIndex = quotes.length / 2;\n  const lowerIndex = upperIndex - 1;\n\n  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;\n  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;\n\n  const quotesMatchingUpperIndexValue = quotes.filter(\n    (quote) => overallValueAtUpperIndex === quote.overallValueOfQuote,\n  );\n  const quotesMatchingLowerIndexValue = quotes.filter(\n    (quote) => overallValueAtLowerIndex === quote.overallValueOfQuote,\n  );\n\n  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingUpperIndexValue,\n  );\n  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingLowerIndexValue,\n  );\n\n  return {\n    ethFee: new BigNumber(feesAndValueAtUpperIndex.ethFee, 10)\n      .plus(feesAndValueAtLowerIndex.ethFee, 10)\n      .dividedBy(2)\n      .toString(10),\n    metaMaskFeeInEth: new BigNumber(\n      feesAndValueAtUpperIndex.metaMaskFeeInEth,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10)\n      .dividedBy(2)\n      .toString(10),\n    ethValueOfTokens: new BigNumber(\n      feesAndValueAtUpperIndex.ethValueOfTokens,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10)\n      .dividedBy(2)\n      .toString(10),\n  };\n}\n\n/**\n * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across\n * an array of objects containing those properties.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and\n * ethValueOfTokens properties\n * @returns {Object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of\n * the passed quote objects\n */\nfunction meansOfQuotesFeesAndValue(quotes: QuoteValues[]) {\n  const feeAndValueSumsAsBigNumbers = quotes.reduce(\n    (feeAndValueSums, quote) => ({\n      ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),\n      metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(\n        quote.metaMaskFeeInEth,\n        10,\n      ),\n      ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(\n        quote.ethValueOfTokens,\n        10,\n      ),\n    }),\n    {\n      ethFee: new BigNumber(0, 10),\n      metaMaskFeeInEth: new BigNumber(0, 10),\n      ethValueOfTokens: new BigNumber(0, 10),\n    },\n  );\n\n  return {\n    ethFee: feeAndValueSumsAsBigNumbers.ethFee\n      .div(quotes.length, 10)\n      .toString(10),\n    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth\n      .div(quotes.length, 10)\n      .toString(10),\n    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens\n      .div(quotes.length, 10)\n      .toString(10),\n  };\n}\n\nexport function calculateGasLimits(\n  approvalNeeded: boolean,\n  gasEstimateWithRefund: string | null,\n  gasEstimate: string | null,\n  averageGas: number,\n  maxGas: number,\n  gasMultiplier: number,\n  gasLimit: string | null,\n) {\n  let tradeGasLimit, tradeMaxGasLimit;\n  const customGasLimit = gasLimit && new BigNumber(gasLimit, 16);\n  if (\n    !approvalNeeded &&\n    gasEstimate &&\n    gasEstimateWithRefund &&\n    gasEstimateWithRefund !== '0'\n  ) {\n    tradeGasLimit = new BigNumber(gasEstimateWithRefund, 16);\n    tradeMaxGasLimit =\n      customGasLimit ||\n      new BigNumber(gasEstimate).times(gasMultiplier).integerValue();\n  } else {\n    tradeGasLimit = new BigNumber(averageGas || MAX_GAS_LIMIT, 10);\n    tradeMaxGasLimit =\n      customGasLimit || new BigNumber(maxGas || MAX_GAS_LIMIT, 10);\n  }\n  return { tradeGasLimit, tradeMaxGasLimit };\n}\n\nexport function calcTokenAmount(value: number | BigNumber, decimals: number) {\n  const multiplier = Math.pow(10, Number(decimals || 0));\n  return new BigNumber(value).div(multiplier);\n}\n\n/**\n * Estimates required gas for a given transaction\n *\n * @param transaction - Transaction object to estimate gas for\n * @returns - Promise resolving to an object containing gas and gasPrice\n */\nexport async function estimateGas(transaction: Transaction, ethQuery: any) {\n  const estimatedTransaction = { ...transaction };\n  const { value, data } = estimatedTransaction;\n  const { gasLimit } = await query(ethQuery, 'getBlockByNumber', [\n    'latest',\n    false,\n  ]);\n  estimatedTransaction.data = !data\n    ? data\n    : /* istanbul ignore next */ addHexPrefix(data);\n\n  // 3. If this is a contract address, safely estimate gas using RPC\n  estimatedTransaction.value =\n    typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n  const gasHex = await query(ethQuery, 'estimateGas', [estimatedTransaction]);\n  return { blockGasLimit: gasLimit, gas: addHexPrefix(gasHex) };\n}\n\n/**\n * Given the standard set of information about a transaction, returns a transaction properly formatted for\n * publishing via JSON RPC and web3\n *\n * @param {boolean} [sendToken] - Indicates whether or not the transaciton is a token transaction\n * @param {string} data - A hex string containing the data to include in the transaction\n * @param {string} to - A hex address of the tx recipient address\n * @param {string} amount - A hex amount, in case of a token tranaction will be set to Tx value\n * @param {string} from - A hex address of the tx sender address\n * @param {string} gas - A hex representation of the gas value for the transaction\n * @param {string} gasPrice - A hex representation of the gas price for the transaction\n * @returns {object} An object ready for submission to the blockchain, with all values appropriately hex prefixed\n */\nexport function constructTxParams({\n  sendToken,\n  data,\n  to,\n  amount,\n  from,\n  gas,\n  gasPrice,\n}: {\n  sendToken?: boolean;\n  data?: string;\n  to?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  amount?: string;\n}): any {\n  const txParams: Transaction = {\n    data,\n    from,\n    value: '0',\n    gas,\n    gasPrice,\n  };\n\n  if (!sendToken) {\n    txParams.value = amount;\n    txParams.to = to;\n  }\n  return normalizeTransaction(txParams);\n}\n"]}
\ No newline at end of file
